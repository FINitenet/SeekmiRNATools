%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.3.3
%%CreationDate: Wed Dec  4 16:33:54 2024
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UACGUCAAUUGUCCCUUGGAAAUCCUCUGAACACUUCAAUGGGAUGUUAUUGUUUACGAUUUCCUACUGAAGUGUUUGGGGGAACUCCAAGUGGCACUUGACACCAA\
) def
/coor [
[91.92053223 389.11029053]
[88.89681244 373.98214722]
[94.55324554 359.62915039]
[107.08489990 350.63131714]
[106.21273041 335.65667725]
[105.34055328 320.68206787]
[104.46838379 305.70745850]
[103.59621429 290.73281860]
[95.13197327 278.47695923]
[102.05377960 264.25027466]
[101.18160248 249.27563477]
[100.30943298 234.30101013]
[99.43726349 219.32638550]
[90.97302246 207.07054138]
[97.89482880 192.84382629]
[97.02265167 177.86920166]
[96.15048218 162.89457703]
[95.27831268 147.91996765]
[94.40613556 132.94534302]
[93.53396606 117.97071838]
[82.77999115 108.25998688]
[81.93750000 93.79498291]
[91.49140930 82.90145874]
[90.61923981 67.92683411]
[89.74707031 52.95220947]
[88.87489319 37.97758865]
[88.00272369 23.00296593]
[87.13055420 8.02834415]
[86.25837708 -6.94627810]
[85.38620758 -21.92090034]
[84.51403046 -36.89552307]
[83.64186096 -51.87014389]
[82.76969147 -66.84476471]
[81.89751434 -81.81938934]
[81.02534485 -96.79401398]
[80.15316772 -111.76863861]
[79.28099823 -126.74325562]
[78.40882874 -141.71788025]
[69.88220978 -155.04481506]
[76.86639404 -168.20043945]
[75.99421692 -183.17506409]
[75.12204742 -198.14968872]
[74.24987793 -213.12431335]
[73.37770081 -228.09893799]
[64.85108185 -241.42587280]
[71.83526611 -254.58149719]
[70.96309662 -269.55612183]
[70.09092712 -284.53073120]
[56.59941864 -292.01290894]
[49.31494522 -305.61218262]
[50.56195068 -320.98904419]
[59.94252396 -333.23684692]
[74.46334839 -338.44732666]
[89.49089813 -334.95785522]
[100.22991943 -323.88189697]
[103.25363922 -308.75375366]
[97.59719849 -294.40075684]
[85.06554413 -285.40292358]
[85.93772125 -270.42828369]
[86.80989075 -255.45367432]
[95.27412415 -243.19781494]
[88.35232544 -228.97109985]
[89.22449493 -213.99649048]
[90.09667206 -199.02186584]
[90.96884155 -184.04724121]
[91.84101868 -169.07261658]
[100.30525208 -156.81675720]
[93.38344574 -142.59005737]
[94.25562286 -127.61543274]
[95.12779236 -112.64080811]
[95.99996948 -97.66618347]
[96.87213898 -82.69155884]
[97.74430847 -67.71694183]
[98.61648560 -52.74231720]
[99.48865509 -37.76769638]
[100.36082458 -22.79307365]
[101.23300171 -7.81845045]
[102.10517120 7.15617180]
[102.97734833 22.13079453]
[103.84951782 37.10541534]
[104.72168732 52.08003998]
[105.59386444 67.05466461]
[106.46603394 82.02928162]
[117.22000885 91.74001312]
[118.06250000 106.20501709]
[108.50859070 117.09854126]
[109.38076019 132.07316589]
[110.25292969 147.04779053]
[111.12510681 162.02241516]
[111.99727631 176.99703979]
[112.86944580 191.97164917]
[121.39606476 205.29859924]
[114.41188049 218.45422363]
[115.28405762 233.42884827]
[116.15622711 248.40345764]
[117.02839661 263.37808228]
[125.55501556 276.70501709]
[118.57083130 289.86065674]
[119.44300842 304.83526611]
[120.31517792 319.80990601]
[121.18735504 334.78451538]
[122.05952454 349.75915527]
[135.55102539 357.24130249]
[142.83549500 370.84057617]
[141.58850098 386.21746826]
[132.20793152 398.46524048]
[117.68709564 403.67572021]
] def
/pairs [
[4 102]
[5 101]
[6 100]
[7 99]
[8 98]
[10 96]
[11 95]
[12 94]
[13 93]
[15 91]
[16 90]
[17 89]
[18 88]
[19 87]
[20 86]
[23 83]
[24 82]
[25 81]
[26 80]
[27 79]
[28 78]
[29 77]
[30 76]
[31 75]
[32 74]
[33 73]
[34 72]
[35 71]
[36 70]
[37 69]
[38 68]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[46 60]
[47 59]
[48 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
